name: Documentation

on:
  push:
    branches:
      - main
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - '.github/workflows/docs.yml'
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., latest, 0.1.0)'
        required: false
        default: 'latest'
      alias:
        description: 'Version alias (e.g., latest, stable)'
        required: false
        default: 'latest'

jobs:
  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs]"
          pip install mike

      - name: Configure Git
        run: |
          git config --local user.name "GitHub Actions"
          git config --local user.email "actions@github.com"

      - name: Get version from package
        id: get_version
        run: |
          VERSION=$(python -c "from importlib.metadata import version; print(version('plan-lint'))")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        shell: bash

      - name: Deploy docs as latest
        if: github.event_name == 'push' || github.event.inputs.version == 'latest' 
        run: |
          mike deploy --push --update-aliases latest
          mike set-default --push latest

      - name: Deploy versioned docs
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.version != 'latest'
        run: |
          VERSION=${{ github.event.inputs.version }}
          ALIAS=${{ github.event.inputs.alias || 'stable' }}
          
          mike deploy --push $VERSION $ALIAS
          
          # Update default if alias is stable
          if [ "$ALIAS" == "stable" ]; then
            mike set-default --push $VERSION
          fi 